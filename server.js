const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const path = require('path');
const cron = require('node-cron');
require('dotenv').config();

// „Éá„Éº„Çø„Éô„Éº„ÇπË®≠ÂÆö
const { connectDatabase } = require('./models');

// „É´„Éº„Çø„Éº„ÅÆ„Ç§„É≥„Éù„Éº„Éà
const eventRoutes = require('./routes/events');
const municipalityRoutes = require('./routes/municipalities');
const developmentAreaRoutes = require('./routes/developmentAreas');
const venueHistoryRoutes = require('./routes/venueHistories');
const schoolRoutes = require('./routes/schools');
const dashboardRoutes = require('./routes/dashboard');
const googleDriveRoutes = require('./routes/googleDrive');
const authRoutes = require('./routes/auth');
const exportRoutes = require('./routes/export');

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÂàùÊúüÂåñ
const app = express();
const PORT = process.env.PORT || 5001;

// „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éü„Éâ„É´„Ç¶„Çß„Ç¢
app.use(helmet());

// „É¨„Éº„ÉàÂà∂Èôê
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15ÂàÜ
    max: 100, // ÊúÄÂ§ß100„É™„ÇØ„Ç®„Çπ„Éà
    message: 'Too many requests from this IP, please try again later.',
    standardHeaders: true,
    legacyHeaders: false,
});
app.use(limiter);

// CORSË®≠ÂÆö
app.use(cors({
    origin: process.env.NODE_ENV === 'production'
        ? process.env.FRONTEND_URL || 'https://your-frontend-domain.com'
        : 'http://localhost:3000',
    credentials: true
}));

// „É≠„Ç∞Ë®≠ÂÆö
app.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));

// „Éú„Éá„Ç£„Éë„Éº„Çµ„Éº
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ÈùôÁöÑ„Éï„Ç°„Ç§„É´„ÅÆÈÖç‰ø°
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// API routes
app.use('/api/auth', authRoutes);
app.use('/api/events', eventRoutes);
app.use('/api/municipalities', municipalityRoutes);
app.use('/api/development-areas', developmentAreaRoutes);
app.use('/api/venue-histories', venueHistoryRoutes);
app.use('/api/schools', schoolRoutes);
app.use('/api/dashboard', dashboardRoutes);
app.use('/api/google-drive', googleDriveRoutes);
app.use('/api/notifications', require('./routes/notifications'));
app.use('/api/export', exportRoutes);

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV || 'development'
    });
});

// Êú¨Áï™Áí∞Â¢É„Åß„ÅÆReact„Ç¢„Éó„É™ÈÖç‰ø°
if (process.env.NODE_ENV === 'production') {
    app.use(express.static(path.join(__dirname, 'client/build')));

    app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, 'client/build/index.html'));
    });
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
app.use((err, req, res, next) => {
    console.error(err.stack);

    if (err.name === 'ValidationError') {
        return res.status(400).json({
            error: 'Validation Error',
            details: err.errors
        });
    }

    if (err.name === 'SequelizeValidationError') {
        return res.status(400).json({
            error: 'Database Validation Error',
            details: err.errors.map(e => ({
                field: e.path,
                message: e.message
            }))
        });
    }

    res.status(500).json({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'production'
            ? 'Something went wrong!'
            : err.message
    });
});

// 404„Éè„É≥„Éâ„É™„É≥„Ç∞
app.use((req, res) => {
    res.status(404).json({
        error: 'Not Found',
        message: 'The requested resource was not found.'
    });
});

// Ëá™ÂãïÂåñ„Çø„Çπ„ÇØÔºà„Çπ„ÉÜ„Éº„Çø„ÇπËá™ÂãïÊõ¥Êñ∞Ôºâ - ÊØéÊó•ÂçàÂâç6ÊôÇ„Å´ÂÆüË°å
cron.schedule('0 6 * * *', async () => {
    try {
        console.log('Daily status update started...');
        const statusUpdateService = require('./services/statusUpdateService');
        await statusUpdateService.updateAllEventStatuses();
        console.log('Daily status update completed.');
    } catch (error) {
        console.error('Error in daily status update:', error);
    }
});

// Ëá™ÂãïÂåñ„Çø„Çπ„ÇØÔºàÊ¨°Âπ¥Â∫¶ÂÄôË£úÁîüÊàê„Å®3„É∂ÊúàÂâç„É™„Éû„Ç§„É≥„ÉâÔºâ - ÊØéÊó•ÂçàÂâç1ÊôÇ„Å´ÂÆüË°å
cron.schedule('0 1 * * *', async () => {
    try {
        console.log('Monthly reminder and candidate generation started...');
        const statusUpdateService = require('./services/statusUpdateService');
        const emailService = require('./services/emailService');
        await statusUpdateService.generateNextYearCandidates();
        await emailService.sendThreeMonthReminder();
        console.log('Monthly reminder and candidate generation completed.');
    } catch (error) {
        console.error('Error in monthly reminder and candidate generation:', error);
    }
});

// Ëá™ÂãïÂåñ„Çø„Çπ„ÇØÔºà„ÉÅ„É©„Ç∑ÈÖçÂ∏ÉÊó•ÈÄöÁü•Ôºâ
cron.schedule('0 9 * * *', async () => {
    try {
        console.log('Daily notification check started...');
        const emailService = require('./services/emailService');
        await emailService.sendFlyerDistributionNotification();
        await emailService.sendOverdueNotification();
        console.log('Daily notification check completed.');
    } catch (error) {
        console.error('Error in daily notification check:', error);
    }
});

// Ëá™ÂãïÂåñ„Çø„Çπ„ÇØÔºàÊúàÊ¨°„É¨„Éù„Éº„ÉàÔºâ
cron.schedule('0 0 1 * *', async () => {
    try {
        console.log('Monthly report generation started...');
        const reportService = require('./services/reportService');
        await reportService.generateMonthlyReport();
        console.log('Monthly report generation completed.');
    } catch (error) {
        console.error('Error in monthly report generation:', error);
    }
});

// Ëá™ÂãïÂåñ„Çø„Çπ„ÇØÔºàGoogle„Éâ„É©„Ç§„ÉñÊúàÊ¨°„É¨„Éù„Éº„ÉàÔºâ - ÊØéÊúà1Êó•ÂçàÂâç2ÊôÇ„Å´ÂÆüË°å
cron.schedule('0 2 1 * *', async () => {
    try {
        console.log('Google Drive monthly report generation started...');
        const googleDriveService = require('./services/googleDriveService');
        await googleDriveService.initialize();
        await googleDriveService.generateMonthlyReport();
        console.log('Google Drive monthly report generation completed.');
    } catch (error) {
        console.error('Error in Google Drive monthly report generation:', error);
    }
});

// Ëá™ÂãïÂåñ„Çø„Çπ„ÇØÔºà„Éá„Éº„Çø„Éô„Éº„ÇπÊúÄÈÅ©ÂåñÔºâ - ÊØéÈÄ±Êó•ÊõúÊó•ÂçàÂâç3ÊôÇ„Å´ÂÆüË°å
cron.schedule('0 3 * * 0', async () => {
    try {
        console.log('Database optimization started...');
        const databaseOptimizationService = require('./services/databaseOptimizationService');
        const optimizationService = new databaseOptimizationService();
        await optimizationService.performOptimization();
        console.log('Database optimization completed.');
    } catch (error) {
        console.error('Error in database optimization:', error);
    }
});

// Ëá™ÂãïÂåñ„Çø„Çπ„ÇØÔºàGoogle„Éâ„É©„Ç§„ÉñÂêåÊúüÔºâ - ÊØéÊó•ÂçàÂâç4ÊôÇ„Å´ÂÆüË°å
cron.schedule('0 4 * * *', async () => {
    try {
        console.log('Google Drive sync started...');
        const GoogleDriveSyncService = require('./services/googleDriveSyncService');
        const syncService = new GoogleDriveSyncService();
        await syncService.initialize();
        await syncService.performFullSync();
        console.log('Google Drive sync completed.');
    } catch (error) {
        console.error('Error in Google Drive sync:', error);
    }
});

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
const startServer = async () => {
    try {
        // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö
        await connectDatabase();

        // „Çµ„Éº„Éê„ÉºËµ∑Âãï
        app.listen(PORT, () => {
            console.log(`üöÄ Server running on port ${PORT}`);
            console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
            console.log(`üîó API Base URL: http://localhost:${PORT}/api`);
            if (process.env.NODE_ENV !== 'production') {
                console.log(`üåê Frontend URL: http://localhost:3000`);
            }
        });
    } catch (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
};

// „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
process.on('SIGINT', async () => {
    console.log('\nüõë Shutting down gracefully...');
    try {
        const { sequelize } = require('./models');
        await sequelize.close();
        console.log('‚úÖ Database connection closed.');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error during shutdown:', error);
        process.exit(1);
    }
});

// Êú™Âá¶ÁêÜ„ÅÆ‰æãÂ§ñ„Çí„Ç≠„É£„ÉÉ„ÉÅ
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
    process.exit(1);
});

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
startServer();

module.exports = app;
